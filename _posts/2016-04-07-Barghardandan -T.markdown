---
layout: post
title:  "برگرداندن تغییرات در GIT"
date:   2016-04-01 21:48:24 +0430
categories: jekyll update
---
#برگرداندن تغییرات در GIT
نکته اصلی در نگهداری نسخه های امن از پروژه در حال تکمیل آسودگی ذهن در مواقع اشکال و خرابی در پروژه میباشد. 

شما همیشه میدانید که نسخه های درست قبلی موجود هستند و دقیقاً میتوانید نقطه آغاز اشکالات پروژه کجا میباشد. اگر قرار بود که شما نتوانید از نسخه های گذشته استفاده کنید تمام کامیت ها بی ارزش میبودند.

از آنجا که Git دارای بخشهای گوناگونی میباشد لذا برگرداندن تغییرات اعمال شده به حالت قبل از اعمال آنها معانی مختلفی در Git پیدا میکند. به عنوان مثال شما میتوانید:

تغییرات در پوشه پروژه را برگردانید.
تغییرات در فضای stage را برگردانید.
تمامی تغییرات یک کامیت را برگردانید.
همچنین شما میتوانید به دو روش تغییرات حاصل از یک کامیت را برگردانید:

به سادگی کامیت را از تاریخچه پروژه پاک کنید.
کامیت مشکل ساز را دست نخورده بگذارید و یک کامیت جدید به ثبت برسانید که تغییرات کامیت قبلی را به حالت قبل برمیگرداند.
برای هر یک از این سناریو ها Git یک ابزار در اختیار شما قرار داده است که در این مقاله به بررسی آنها میپردازیم:

##بازگرداندن تغییرات در پوشه پروژه

از آنجا که هر نسخه از پروژه شما قابل بازگشت هستند شما میتوانید آزادانه بدون اینکه به پروژه آسیبی وارد کنید اقدام به تحقیق و آزمایش قابلیتهای جدید بر روی پروژه نمایید. اما کد نویسی بدون هدف و صرفاً آزمایش تکنیکهای گوناگون بر روی پروژه میتواند منجر به شلوغ شدن پوشه پروژه با کدهای نامنظم و نامرتبط شود. زمانی که این مشکل برای شما پیش آمد میتوانید فرمانهای زیر را اجرا کنید:

git reset --hard HEAD git clean -f

با اجرای این فرمان شما به Git فرمان میدهید که محتویات پوشه پروژه را به حالتی که پس از آخرین کامیت که به آن HEAD نیز گفته میشود برگرداند. این فرمان تمامی تغییرات کامیت نشده را حذف میکند و فایلهای جدید اما کامیت نشده را دیگر ردگیری نمیشوند. برای حذف فایلهایی که دیگر ردگیری نمیشوند فرمان دوم را اجرا میکنیم. از آنجا که Git خیلی با احتیاط اقدام به حذف فایلها میکند ممکن است برخی از آنها را پاک نکند برای اینکه Git را مجبور کنید که تمامی فایلهایی که ردگیری نمیشوند را حذف کند باید از سوئیچ -f در فرمان clean استفاده کنید.

1.jpg

##بازگرداندن یک فایل خاص

امکان هدف قرار دادن یک فایل خاص و برگرداندن وضعیت آن به آخرین کامیت ثب شده نیز در Git موجود میباشد تنها کافی است که فرمان زیر را اجرا کنید:

git checkout HEAD < file >

این فرمان تاثیری بر روی تاریخچه پروژه نخواهد داشت و شما میتوانید به جای HEAD از شناسه کامیت، شاخه و یا تگ برای شناسایی کامیت مورد نظر و برگرداندن فایل به آن کامیت استفاده کنید. اما توجه داشته باشید که استفاده از فرمان git reset تاریخچه پروژه را نیز تغییر میدهد که در بخش برگرداندن کامیتها بیشتر در مورد آن توضیح خواهیم داد.

2.jpg

##بازگرداندن تغییرات در Stage

اگر در حین تنظیم کردن کامیت آینده خود در Stage به اشتباه یک فایل اضافه را قرار دادید میتوانید با استفاده از فرمان زیر آن را از Stage خارج کنید:

git reset HEAD < file >

همانطور که ملاحظه میکنید در این فرمان از --hard استفاده نشده است که این به Git فرمان میدهد که کاری با پوشه پروژه نداشته باشد و تنها فایل را از Stage خارج کند. توجه داشته باشید که سوئیچ --hard تغییرات را هم در Stage و هم در پوشه پروژه برمیگرداند.

3.jpg

##بازگرداندن کامیت ها

به دو صورت شما میتوانید تغییرات حاصل از یک کامیت را خنثی کنید. اول با حذف کامیت از تارخچه پروژه و دوم با ایجاد یک کامیت جدید که تغییرات کامیت قبلی را خنثی میکند. که روش دوم روش توصیه شده میباشد.

##حذف کامیت

با استفاده از فرمان reset شما میتوانید آخرین کامیت را به صورت زیر حذف کنید:

git reset HEAD~1

HEAD~1 مشخص میکند که به اولین کامیت قبل از آخرین کامیت برگشت خواهد شد. لذا این فرمان کامیت HEAD را حذف خواهد کرد. HEAD~2 کامیت آخر و کامیت یکی مانده به آخر را حذف خواهد کرد. با اجرای دستور reset شما یک یا چند کامیت در تاریخچه پروژه به عقب باز خواهید گشت.

4.jpg

علت اینکه این روش مورد پسند نیست این میباشد که فرض کنید برنامه نویس دیگری بر روی کامیتی که شما میخواهدی پاک کنید کار کرده باشد و بخشهای از پروژه وی وابسته به این کامیت باشند. پس از حذف این کامیت دیگر برنامه نویسان چگونه با repository اصلی sync شوند؟ دیگر اعضای تیم باید به صورت دستی کامیت جایگزین را با استفاده از شناسه در تاریخچه درج کنند و تمامی تغییرات اعمال شده بعد از آن کامیت را دوباره چک کنند و اصلاح کنند و ... تصورش را کنید که چه اتفاقی می افتد اگر پروژه داری چندین برنامه نویس باشد.

نکته ای که باید در ذهن داشت این هست که کامیت های منشر شده در Repository های آنلاین یا اصطلاحاً کامیتهای public را هیچگاه حذف نکنید اما کامیتهای موجود در repository سیستم خود را میتوانید قبل از آپلود آنها به repository های آنلاین پاک کنید.

##ایجاد کامیت خنثی کننده

برای جلوگیری از مشکلات ناشی از reset کردن یک کامیت بهتر است که یک کامیت خنثی کننده ایجاد کنید که برای این منظور باید از فرمان زیر استفاده کنیم:

git revert < commit-id >

5.jpg

این فرمان کامیت مشخص شده را بررسی میکند و عکس آنرا ایجاد میکند. برای Git و دیگر برنامه نویسان این یک کامیت عادی میباشد فقط تغییرات موجود در کامیت مشخص شده را برمیگرداند.

##اصلاح کامیتها

شما علاوه بر حذف و یا برگرداندن کامیتها میتوانید آنها را با استفاده از فرمان زیر اصلاح کنید. مثلاً اگر یک یا چند فایل را فراموش کرده اید که به یک کامیت اضافه کنید با استفاده از این فرمان میتوانید آنها را به کامیت اضافه کنید. توجه داشته باشید که این فرمان نیز باعث تغییرات در تاریخچه پروژه خواهد شد.

git commit -amend

6.jpg

این فرمان به جای ثبت یک کامیت جدید تغییرات جدید را به کامیت قبلی اضافه میکند.

در مقاله بعدی به نحوه ایجاد و بررسی موارد کاربرد شاخه ها یا Branches در گیت خواهیم پرداخت.