---
layout: post
title:  " ثبت تغییرات در GIT"
date:   2016-04-02 21:48:24 +0430
categories: jekyll update
---
#ثبت تغییرات در GIT 
نگهداری تاریخچه تغییرات و نسخه های مختلف یک پروژه هدف اصلی هر سیستم کنترل ورژن میباشد. در Git با ثبت snapshot هایی از پروژه این هدف عملی میشود.

 بعد از ثبت snapshot شما میتوانید به عقب برگردید و ورژنهای گذشته را ببینید و آنها را دوباره بارگذاری کنید و بدون ترس از خراب شدن عملکرد پروژه به تست قابلیتهای جدید پروژه بپردازید.

کسانی که قبلا با سیستم های SVN و CVS کار کرده اند توجه داشته باشند که عملکرد GIT با این سیستمها متفاوت هست. در این سیستمها diff ها برای هر فایل به صورت تصاعدی ایجاد میشوند و به این ترتیب تاریخچه تغییرات پروژه با مقایسه تاریخ نسخه های مختلف هر فایل ایجاد و نگهداری میشود. در صورتی که در GIT کل فایلهای تغییر کرده ذخیره نمیشوند و تنها تغییراتی که بر روی آنها اعمال شده ذخیره میشوند به همین خاطر به این رکوردها snapshot گفته میشود و یکی از دلایل سرعت بالای GIT نیز استفاده از این تکنیک میباشد.

1.jpg

در این مقاله به بررسی نحوه ایجاد snapshot ها با استفاده از پوشه پروژه، staging area و تاریخچه کامیتها خوهیم پرداخت.

##Staging Area

منقطه staging مکانی است که شما در آن میتوانید قبل از ثبت تغییرات اعمال شده بر روی پروژه کامیتهای خود را دسته بندی و مدیریت کنید. منظور از staging انتقال تغییرات از پوشه پروژه به snapshot میباشد.

2.jpg

Staging Area به شما این امکان را میدهد که تغییرات مرتبط با یکدیگر را انتخاب کنید و تنها بخشی از تغییرات را کامیت کنید. این بدان معنی است که شما میتوانید بر اساس زمان اقدام به ایجاد snapshot های منطقی کنید. با دسته بندی تغییرات شما میتوانید مراحل مختلف کد نویسی را از snapshot های مختلف جدا کنید. به عبارت دیگر لازم نیست که پس از تکمیل هر قسمت از پروژه کامیت کنید بلکه میتوانید در پایان هر روز کاری پروژه را کامیت کنید و بعد قسمتهای مختلف تغییرات را به هر تعداد کامیت که لازم باشد تقسیم کنید.

برای اضافه کردن فایلهای جدید و یا تغییر یافته به staging area از فرمان زیر استفاده کنید:

git add < file >

برای حذف یک فایل از پروژه شما باید ابتدا آن را به staging area اضافه کنید و سپس به git فرمان دهید که دیگر این فایل را ردیابی نکند. این فرمان فایل را به صورت فیزیکی از روی هارد دیسک پاک نمیکند تنها git دیگر آن را مانیتور نمیکند:

git rm --cached < file >

##بررسی stage

مشاهده وضعیت repository یکی از عملیات رایج در Git میباشد. خروجی فرمان زیر گزارشی از پوشه پروژه و staging area ارائه میدهد:

git status

نمونه ای از خروجی این فرمان به صورت زیر میباشد البته بعضی از بخشها حذف شده اند:

 On branch master
 Changes to be committed:

 new file: foobar.txt

 Changes not staged for commit:

 modified: foo.txt

 Untracked files:

bar.txt
    
بخش اول با عنوان Changes to be committed همان وضعیت stage شما میباشد. اگر فرمان git commit را الان اجرا کنید تنها فایلهای ذکر شده در این بخش به تاریخچه پروژه اضافه میشوند. بخش دوم با عنوان Changes not staged for commit در بر دارنده فهرستی از فایلهای در حال مانیتور میباشد که جزء کامیت بعدی نمیباشند. و در نهایت در بخش آخر با عنوان Untracked files فهرستی از فایلهای موجود در پوشه پروژه که به repository اضافه نشده اند ارائه میشود.

##ایجاد Diff ها

در صورتی که نیاز به اطلاعات بیشتر در رابطه با تغییرات فایلهای گوناگون در پوشه پروژه هستید میتوانید با استفاده از فرمان زیر یک diff ایجاد کنید:

git diff

نتیجه حاصل از اجرای این فرمان فهرستی از تمامی تغییرات اعمال شده و ثبت نشده در stage میباشد. همچنین در صورتی که میخواهید اطلاعات کاملی از تغییرات موجود در stage را بدست بیاورید میتوانید diff مربوط به stage را با استفاده از فرمان زیر ایجاد کنید:

git diff -cached

توجه داشته باشید که تاریخچه پروژه در git status نمایش داده نمیشود. برای نمایش فهرستی از snapshot های کامیت شده باید از فرمان git log استفاده کنید.

3.jpg

##کامیتها

کامیتها نمایانگر هر نسخه ذخیره شده پروژه میباشند. هر کامیت در بردارنده snapshot از کل پروژه، اطلاعات کاربر، تاریخ ، عنوان و یک SHA-1 Chechsum برای تمام محتوای کامیت میباشد. به طور مثال:

commit b650e3bd831aba05fa62d6f6d064e7ca02b5ee1b
Author: john 
Date: Wed Jan 11 00:45:10 2014 -0600
Some commit message
    
این checksum نقش Id کامیت در Git را دارد بنابر این کامیتها هیچوقت به صورت اتفاقی تغییر نمیکنند و یا داده آنها از بین نمیرود بدون اینکه git از آن اطلاع نداشته باشد.

از آنجا که staging area در بر دارنده تمامی تغییرات میباشد کامیت کردن پروژه نیازی به بررسی پوشه پروژه نخواهد داشت.

4.jpg

برای کامیت کردن snapshot در stage و اضافه کردن تغییرات به تاریخچه پروژه از فرمان زیر استفاده کنید:

git commit

پس از اجرای این فرمان یک ویرایشگر متن باز میشود و از شما عنوان کامیت درخواست خواهد شد. فرم عنوان و توضیحات کامیت باید به صورت زیر باشد:

< commit summary in 50 characters or less. >
< blank line >
< detailed description of changes in this commit. >
    
git از خط اول برای قالب بندی خروجی log، ارسال میل و ... استفاده میکند. بنابراین بهتر است کوتاه و خلاصه باشد. اگر نتوانستید که به صورت خلاصه کلیه تغییرات را بنویسید این بدان معنی است که commit در بردارنده تغییرات نامرتبط هست و باید تغییرات مرتبط با یکدیگر را گروه بندی کنید و در قالب یک کامیت هر گروه را ثبت کنید. بعد از خلاصه کامیت یک خط خالی بگذارید و سپس جزئیات تغییرات مانند دلایل اعمال تغییرات و اینکه این تغییرات مربوط به کدام تیکت بوده و ... را ذکر کنید.

##بررسی کامیتها

همانند بررسی وضعیت repository بررسی تاریخچه پروژه نیز جزء امور معمول در Git میباشد. برای نمایش تاریخچه شاخه کنونی پروژه از فرمان زیر استفاده کنید:

git log

5.jpg

تا الان با دو وسیله مورد نیاز برای بررسی تمامی بخشهای repository گیت آشنا شدیم. فرمانهایی که تا کنون بررسی شده اند را میتوان به دو گروه زیر تقسیم کرد:

فرمانهای مربوط به stage و پوشه پروژه: git add, git rm, git status
فرمانهای مربوط به تاریخچه کامیتها: git commit, git log
##سویج های کاربردی

git سویچ های بسیاری برای قالب بندی خروجی فرمان git log دارد که به برخی از پر کاربردترین آنها اشاره میکنیم:

برای نمایش هر کامیت در یک خط از سویچ زیر استفاده کنید:

git log -oneline

همچنین شما میتوانید یک فایل خاص را هدف قرار بدهید و تنها تاریخچه مربوط به آن فایل را لیست کنید:

git log --oneline < file >

زمانی که فهرست تاریخچه پروژه از یک صفحه بیشتر شد شما میتوانید با استفاده از سویچ های until و since اقدام به فیلتر کردن فهرست نمایید:

git log < since > .. < until >

در بخشهای since و until میتوان id، اسم شاخه و یا تگ کامیت را بگذارید. همچنین شما میتوانید diff مربوط به تغییرات هر کامیت را فهرست کنید که برای بررسی اینکه کدام فایلها در هر کامیت تغییر کرده اند مفید میباشد:

git log -stat

برای مشاهده تاریخچه به صورت مصور میتوانید از gitk استفاده کنید که یک برنامه جداگانه git میباشد و از آن برای نمایش گرافیکی تغییرات استفاده میشود برای کسب اطلاعات بیشتر در رابطه با gitk فرمان git help gitk را اجرا کنید.

##الصاق برچسب به کامیتها

از برچسبها یا Tag ها برای ایجاد اشاره گر به کامیتهای خاص مانند کامیت انتشار پروژه برای عموم در پروژه های open source میتوان استفاده کرد. برای الصاق برچسب به کامیتها از فرمان git tag به صورت زیر استفاده میشود:

git tag -a v1.0 -m "Stable release"

سویچ -a به گیت فرمان میدهد که یک برچسب با پیغام ایجاد کند که پیغام با سویچ -m مشخص میشود. اجرای فرمان بالا بدون سویچ ها فهرستی از تگ های موجود را ارائه میدهد:

git tag

در مقاله بعدی به بررسی فرمانها و قابلیتهای git در برگرداندن تغییرات یا undo آنها بررسی خواهند شد.